apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-cubefs-csi-controller
  namespace: kube-system
  labels:
    app: my-cubefs-csi-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-cubefs-csi-controller
  template:
    metadata:
      name: my-cubefs-csi-controller
      labels:
        app: my-cubefs-csi-controller
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/role
                    operator: In
                    values: [master]
      serviceAccountName: my-cubefs-csi-controller-sa
      tolerations:
        - operator: Exists
          key: node-role.kubernetes.io/control-plane
      containers:
        # provisioner
        - name: csi-provisioner
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.1.0
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          args:
            - --csi-address=$(ADDRESS)
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: ADDRESS
              value: /csi/csi-controller.sock
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
        # liveness probe
        - name: liveness-probe
          image: registry.k8s.io/sig-storage/livenessprobe:v2.14.0
          args:
            - --csi-address=/csi/csi-controller.sock
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
        # cfs csi driver
        - name: csi-driver
          image: registry.cn-hangzhou.aliyuncs.com/docker-repo-lusx/cubefs:v0.0.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          command:
            - /cfs-csi-driver
          args:
            - --endpoint=unix:///csi/csi-controller.sock
            - --nodeid=$(KUBE_NODE_NAME)
            - --mode=controller
            - --log_dir=/cfs/logs
            - --logtostderr=false
            - --v=10
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          volumeMounts:
            - mountPath: /cfs/logs
              name: logdir
            - mountPath: /cfs/bin/cfs-client
              name: cfs-client
            - mountPath: /csi
              name: socket-dir
      restartPolicy: Always
      volumes:
        - hostPath:
            path: /var/lib/kubelet/plugins/mycubefs.csi.cubefs.com
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: mountpoint-dir
        - hostPath:
            path: /opt/cubefs/controller/logs
            type: DirectoryOrCreate
          name: logdir
        - hostPath:
            path: /usr/bin/cfs-client
            type: File
          name: cfs-client